{"ast":null,"code":"var _jsxFileName = \"/Users/dmytrokurinnyi/Desktop/git/wethe_app/src/App.js\";\nimport React from \"react\";\nimport Mean from \"./components/mean\";\nimport Form from \"./components/form\";\nimport Wethe_aut from \"./components/wethe _autt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"0ba9122c7db41155430fb755e75d71e0\";\nconst London_API = `https://api.openweathermap.org/data/2.5/onecall?lat=51.30&lon=0.07&appid=${API_key}&lang=ru&units=metric`;\nconst Moscow_API = `https://api.openweathermap.org/data/2.5/onecall?lat=55.45&lon=37.36&appid=${API_key}&lang=ru&units=metric`;\nconst Kiev_API = `https://api.openweathermap.org/data/2.5/onecall?lat=50.27&lon=30.31&appid=${API_key}&lang=ru&units=metric`;\nconst Warshawa_API = `https://api.openweathermap.org/data/2.5/onecall?lat=52.13&lon=21.00&appid=${API_key}&lang=ru&units=metric`;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      api: undefined,\n      temp: undefined,\n      city: undefined,\n      pressure: undefined,\n      error: undefined\n    };\n\n    this.gettingWether = async e => {\n      e.preventDefault();\n      const exclude = e.target.elements.exclude.value;\n      const city = e.target.elements.city.value;\n\n      if (exclude === \"current\") {\n        if (city === \"London\") {\n          var _date$current;\n\n          const api_url = await fetch(London_API);\n          const date = await api_url.json();\n          console.log(date);\n          this.setState({\n            api: (_date$current = date.current) === null || _date$current === void 0 ? void 0 : _date$current.weather.map(item => item.description),\n            temp: date.current.temp,\n            city: date.timezone,\n            pressure: date.current.pressure,\n            error: \"\"\n          });\n        }\n\n        if (city === \"Moscow\") {\n          const api_url = await fetch(Moscow_API);\n          const date = await api_url.json();\n          console.log(date);\n          this.setState({\n            temp: date.current.temp,\n            city: date.timezone,\n            pressure: date.current.pressure,\n            error: \"\"\n          });\n        }\n\n        if (city === \"Kiev\") {\n          const api_url = await fetch(Kiev_API);\n          const date = await api_url.json();\n          console.log(date);\n          this.setState({\n            temp: date.current.temp,\n            city: date.timezone,\n            pressure: date.current.pressure,\n            error: \"\"\n          });\n        }\n\n        if (city === \"Warshawa\") {\n          const api_url = await fetch(Warshawa_API);\n          const date = await api_url.json();\n          console.log(date);\n          this.setState({\n            temp: date.current.temp,\n            city: date.timezone,\n            pressure: date.current.pressure,\n            error: \"\"\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Mean, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        wetherMetod: this.gettingWether\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wethe_aut, {\n        temp: this.state.temp,\n        city: this.state.city,\n        pressure: this.state.pressure,\n        error: this.state.error,\n        api: this.state.apie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dmytrokurinnyi/Desktop/git/wethe_app/src/App.js"],"names":["React","Mean","Form","Wethe_aut","API_key","London_API","Moscow_API","Kiev_API","Warshawa_API","App","Component","state","api","undefined","temp","city","pressure","error","gettingWether","e","preventDefault","exclude","target","elements","value","api_url","fetch","date","json","console","log","setState","current","weather","map","item","description","timezone","render","apie"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Mean from \"./components/mean\";\nimport Form from \"./components/form\";\nimport Wethe_aut from \"./components/wethe _autt\";\n\nconst API_key = \"0ba9122c7db41155430fb755e75d71e0\";\nconst London_API = `https://api.openweathermap.org/data/2.5/onecall?lat=51.30&lon=0.07&appid=${API_key}&lang=ru&units=metric`;\nconst Moscow_API = `https://api.openweathermap.org/data/2.5/onecall?lat=55.45&lon=37.36&appid=${API_key}&lang=ru&units=metric`;\nconst Kiev_API = `https://api.openweathermap.org/data/2.5/onecall?lat=50.27&lon=30.31&appid=${API_key}&lang=ru&units=metric`;\nconst Warshawa_API = `https://api.openweathermap.org/data/2.5/onecall?lat=52.13&lon=21.00&appid=${API_key}&lang=ru&units=metric`;\n\n\n\nclass App extends React.Component {\n  state={\n    api:undefined,\n    temp:undefined,\n    city:undefined,\n    pressure: undefined,\n    error:undefined\n\n  }\n\n  //getPosition = ()=>{\n  //  navigator.geolocation.getCurrentPosition((pos)=>{\n  //     const lat= pos.coords.latitude\n  //     const lon= pos.coords.longitude\n  //     console.log(lat,lon)\n  //     \n  //  })\n//}\n  gettingWether = async(e)=>{\n    e.preventDefault();\n    const exclude = e.target.elements.exclude.value;\n    const city = e.target.elements.city.value;\n   \n\n    if(exclude === \"current\"){\n    if(city === \"London\"){\n    const api_url = await\n    fetch(London_API)\n    const date = await api_url.json()\n    console.log(date)\n\n  \n    this.setState({\n      api:date.current?.weather.map((item) => item.description),\n      temp:date.current.temp,\n      city:date.timezone,\n      pressure:date.current.pressure,\n      error:\"\"\n\n\n    })\n\n  }\n  if(city === \"Moscow\"){\n    const api_url = await\n    fetch(Moscow_API)\n    const date = await api_url.json()\n    console.log(date)\n\n  \n    this.setState({\n      temp:date.current.temp,\n      city:date.timezone,\n      pressure:date.current.pressure,\n      error:\"\"\n\n\n    })\n  }\n  if(city === \"Kiev\"){\n    const api_url = await\n    fetch(Kiev_API)\n    const date = await api_url.json()\n    console.log(date)\n\n  \n    this.setState({\n      temp:date.current.temp,\n      city:date.timezone,\n      pressure:date.current.pressure,\n      error:\"\"\n\n\n    })\n  }\n  if(city === \"Warshawa\"){\n    const api_url = await\n    fetch(Warshawa_API)\n    const date = await api_url.json()\n    console.log(date)\n\n  \n    this.setState({\n      temp:date.current.temp,\n      city:date.timezone,\n      pressure:date.current.pressure,\n      error:\"\"\n\n\n    })\n  }\n  \n\n}\n  }\n  render(){\n    return(\n      <React.Fragment>\n        <Mean/>\n        <Form \n        wetherMetod = {this.gettingWether}/>\n        <Wethe_aut\n        temp={this.state.temp}\n        city={this.state.city}\n        pressure={this.state.pressure}\n        error  = {this.state.error}\n        api = {this.state.apie}\n        />\n      </React.Fragment>\n\n      \n\n    );\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}