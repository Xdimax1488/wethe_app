{"ast":null,"code":"var _jsxFileName = \"/Users/dmytrokurinnyi/Desktop/wether/wethe/src/App.js\";\nimport React from \"react\";\nimport Mean from \"./components/mean\";\nimport Form from \"./components/form\";\nimport Wethe_aut from \"./components/wethe _autt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"0ba9122c7db41155430fb755e75d71e0\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      pressure: undefined,\n      error: undefined\n    };\n\n    this.getPosition = () => {\n      navigator.geolocation.getCurrentPosition(pos => {\n        const lat = pos.coords.latitude;\n        const lon = pos.coords.longitude;\n        console.log(lat, lon);\n      });\n    };\n\n    this.gettingWether = async e => {\n      e.preventDefault();\n      const exclude = e.target.elements.exclude.value;\n      const city = e.target.elements.city.value.cord; //const lon = ;\n      //if(exclude === \"minutely\"){\n\n      console.log;\n\n      if (city === \"London\") {\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=51.30&lon=0.07&exclude=${exclude}&appid=${API_key}&lang=ru&units=metric`);\n        const date = await api_url.json();\n        console.log(api_url);\n        console.log(exclude);\n        console.log(city);\n        this.setState({\n          temp: date.current.temp,\n          city: date.timezone,\n          pressure: date.current.pressure,\n          error: \"\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Mean, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        wetherMetod: this.gettingWether,\n        positionMetod: this.getPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wethe_aut, {\n        temp: this.state.temp,\n        city: this.state.city,\n        pressure: this.state.pressure,\n        error: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dmytrokurinnyi/Desktop/wether/wethe/src/App.js"],"names":["React","Mean","Form","Wethe_aut","API_key","App","Component","state","temp","undefined","city","pressure","error","getPosition","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lon","longitude","console","log","gettingWether","e","preventDefault","exclude","target","elements","value","cord","api_url","fetch","date","json","setState","current","timezone","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,MAAMC,OAAO,GAAG,kCAAhB;;AAIA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GAC1B;AACJC,MAAAA,IAAI,EAACC,SADD;AAEJC,MAAAA,IAAI,EAACD,SAFD;AAGJE,MAAAA,QAAQ,EAAEF,SAHN;AAIJG,MAAAA,KAAK,EAACH;AAJF,KAD0B;;AAAA,SAShCI,WATgC,GASlB,MAAI;AAChBC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,GAAD,IAAO;AAC7C,cAAMC,GAAG,GAAED,GAAG,CAACE,MAAJ,CAAWC,QAAtB;AACA,cAAMC,GAAG,GAAEJ,GAAG,CAACE,MAAJ,CAAWG,SAAtB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ,EAAgBG,GAAhB;AAEF,OALD;AAMH,KAhBiC;;AAAA,SAiBhCI,aAjBgC,GAiBhB,MAAMC,CAAN,IAAU;AACxBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,OAAO,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,OAAlB,CAA0BG,KAA1C;AACA,YAAMrB,IAAI,GAAGgB,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBpB,IAAlB,CAAuBqB,KAAvB,CAA6BC,IAA1C,CAHwB,CAOxB;AAEA;;AACET,MAAAA,OAAO,CAACC,GAAR;;AACF,UAAGd,IAAI,KAAK,QAAZ,EAAqB;AACrB,cAAMuB,OAAO,GAAG,MAChBC,KAAK,CAAE,8EAA6EN,OAAQ,UAASxB,OAAQ,uBAAxG,CADL;AAEA,cAAM+B,IAAI,GAAG,MAAMF,OAAO,CAACG,IAAR,EAAnB;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAYS,OAAZ;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AAKA,aAAK2B,QAAL,CAAc;AACZ7B,UAAAA,IAAI,EAAC2B,IAAI,CAACG,OAAL,CAAa9B,IADN;AAEZE,UAAAA,IAAI,EAACyB,IAAI,CAACI,QAFE;AAGZ5B,UAAAA,QAAQ,EAACwB,IAAI,CAACG,OAAL,CAAa3B,QAHV;AAIZC,UAAAA,KAAK,EAAC;AAJM,SAAd;AASD;AAAC,KAhD8B;AAAA;;AAiDhC4B,EAAAA,MAAM,GAAE;AACN,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AACA,QAAA,WAAW,EAAI,KAAKf,aADpB;AAEA,QAAA,aAAa,EAAI,KAAKZ;AAFtB;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE,QAAC,SAAD;AACA,QAAA,IAAI,EAAE,KAAKN,KAAL,CAAWC,IADjB;AAEA,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWG,IAFjB;AAGA,QAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,QAHrB;AAIA,QAAA,KAAK,EAAK,KAAKJ,KAAL,CAAWK;AAJrB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AAnE+B;;AAsElC,eAAeP,GAAf","sourcesContent":["import React from \"react\";\nimport Mean from \"./components/mean\";\nimport Form from \"./components/form\";\nimport Wethe_aut from \"./components/wethe _autt\";\n\nconst API_key = \"0ba9122c7db41155430fb755e75d71e0\";\n\n\n\nclass App extends React.Component {\n  state={\n    temp:undefined,\n    city:undefined,\n    pressure: undefined,\n    error:undefined\n\n  }\n\n  getPosition = ()=>{\n    navigator.geolocation.getCurrentPosition((pos)=>{\n       const lat= pos.coords.latitude\n       const lon= pos.coords.longitude\n       console.log(lat,lon)\n       \n    })\n}\n  gettingWether = async(e)=>{\n    e.preventDefault();\n    const exclude = e.target.elements.exclude.value;\n    const city = e.target.elements.city.value.cord;\n   \n    \n\n    //const lon = ;\n\n    //if(exclude === \"minutely\"){\n      console.log\n    if(city === \"London\"){\n    const api_url = await\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=51.30&lon=0.07&exclude=${exclude}&appid=${API_key}&lang=ru&units=metric`)\n    const date = await api_url.json()\n    console.log(api_url)\n    console.log(exclude)\n    console.log(city)\n    \n    \n\n\n    this.setState({\n      temp:date.current.temp,\n      city:date.timezone,\n      pressure:date.current.pressure,\n      error:\"\"\n\n\n    })\n\n  }}\n  render(){\n    return(\n      <React.Fragment>\n        <Mean/>\n        <Form \n        wetherMetod = {this.gettingWether}\n        positionMetod = {this.getPosition}/>\n        <Wethe_aut\n        temp={this.state.temp}\n        city={this.state.city}\n        pressure={this.state.pressure}\n        error  = {this.state.error}\n        />\n      </React.Fragment>\n\n      \n\n    );\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}